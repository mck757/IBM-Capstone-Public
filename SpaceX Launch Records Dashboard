# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children = [
                                  html.H1('SpaceX Launch Records Dashboard',style = {'textAlign': 'center','color': '#503D36','font-size':40}),
                                  html.Div(
                                           [
                                            html.Div(html.H2('Select Site:', style = {'margin-right':'2em'}),),
                                            dcc.Dropdown(id = 'site-dropdown', options = [
                                                                                          {'label':'All Sites',   'value':'ALL'},
                                                                                          {'label':'CCAFS LC-40', 'value':'CCAFS LC-40'},
                                                                                          {'label':'VAFB SLC-4E', 'value':'VAFB SLC-4E'},
                                                                                          {'label':'KSC LC-39A',  'value':'KSC LC-39A'},
                                                                                          {'label':'CCAFS SLC-40','value':'CCAFS SLC-40'},
                                                                                          ],
                                                                               value = 'ALL',
                                                                               placeholder = "Select Launch Site",
                                                                               searchable = True)
                                           ]),
                                   html.Br(),
                                   html.Div(dcc.Graph(id = 'success-pie-chart')),
                                   html.Br(),
                                   html.P("Payload range (Kg):"),
                                   dcc.RangeSlider(id='payload-slider',
                                                   min=0,
                                                   max=10000,
                                                   step=1000,
                                                   marks={0:'0',2500:'2500',5000:'5000',7500:'7500',10000:'10000'},
                                                   value=[0,9600]
                                                   ),
                                   html.Div(dcc.Graph(id='success-payload-scatter-chart'))
                                   ])

### Pie Chart Callback Decorator ###

@app.callback(Output(component_id = 'success-pie-chart', component_property = 'figure'), 
              Input(component_id='site-dropdown', component_property='value'))
### Pie Chart Callback Function ###

def get_pie_chart(entered_site):
    CCAFS_LC_40 =  spacex_df[spacex_df['Launch Site'] == 'CCAFS LC-40']
    VAFB_SLC_4E =  spacex_df[spacex_df['Launch Site'] == 'VAFB SLC-4E']
    KSC_LC_39A =   spacex_df[spacex_df['Launch Site'] == 'KSC LC-39A']
    CCAFS_SLC_40 = spacex_df[spacex_df['Launch Site'] == 'CCAFS SLC-40']
    
    if entered_site == 'ALL':
        fig = px.pie(spacex_df, values = 'class', names = 'Launch Site', title = 'Total Successful Launches By Site')
        return fig
    
    elif entered_site == 'CCAFS LC-40':
        fig = px.pie(CCAFS_LC_40, names = 'class', title = 'Total Successful Launches for Site CCAFS LC-40')
        return fig

    elif entered_site == 'VAFB SLC-4E':
        fig = px.pie(VAFB_SLC_4E, names = 'class', title = 'Total Successful Launches for Site VAFB SLC-4E')
        return fig

    elif entered_site == 'KSC LC-39A':
        fig = px.pie(KSC_LC_39A, names = 'class', title = 'Total Successful Launches for Site KSC LC-39A')
        return fig

    elif entered_site == 'CCAFS SLC-40':
        fig = px.pie(CCAFS_SLC_40, names = 'class', title = 'Total Successful Launches for Site CCAFS SLC-40')
        return fig

### Scatter Plot Callback Decorator ###

@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
              [Input(component_id='site-dropdown', component_property='value'),
               Input(component_id='payload-slider', component_property='value')])

### Scatter Plot Callback Function ###

def get_scatter_chart(entered_site,payload):
    CCAFS_LC_40 =  spacex_df[spacex_df['Launch Site'] == 'CCAFS LC-40']
    VAFB_SLC_4E =  spacex_df[spacex_df['Launch Site'] == 'VAFB SLC-4E']
    KSC_LC_39A =   spacex_df[spacex_df['Launch Site'] == 'KSC LC-39A']
    CCAFS_SLC_40 = spacex_df[spacex_df['Launch Site'] == 'CCAFS SLC-40']
    
    min, max = payload
    
    if entered_site == 'ALL':
        payload_range = spacex_df[spacex_df['Payload Mass (kg)'].between(min,max)]
        fig2 = px.scatter(payload_range, 
                          x = 'Payload Mass (kg)', 
                          y = 'class', 
                          color = 'Booster Version Category', 
                          title = 'Correlation Between Payload and Successfull Launches for all Sites')
        return fig2
    
    elif entered_site == 'CCAFS LC-40':
        payload_range = CCAFS_LC_40[CCAFS_LC_40['Payload Mass (kg)'].between(min,max)]
        fig2 = px.scatter(payload_range, 
                          x = 'Payload Mass (kg)', 
                          y = 'class', 
                          color = 'Booster Version Category', 
                          title = 'Correlation Between Payload and Successfull Launches for Site CCAFS LC-40')
        return fig2

    elif entered_site == 'VAFB SLC-4E':
        payload_range = VAFB_SLC_4E[VAFB_SLC_4E['Payload Mass (kg)'].between(min,max)]
        fig2 = px.scatter(payload_range, 
                          x = 'Payload Mass (kg)', 
                          y = 'class', 
                          color = 'Booster Version Category', 
                          title = 'Correlation Between Payload and Successfull Launches for Site VAFB SLC-4E') 
        return fig2

    elif entered_site == 'KSC LC-39A':
        payload_range = KSC_LC_39A[KSC_LC_39A['Payload Mass (kg)'].between(min,max)]
        fig2 = px.scatter(payload_range, 
                          x = 'Payload Mass (kg)', 
                          y = 'class', 
                          color = 'Booster Version Category', 
                          title = 'Correlation Between Payload and Successfull Launches for Site KSC LC-39A') 
        return fig2

    elif entered_site == 'CCAFS SLC-40':
        payload_range = CCAFS_SLC_40[CCAFS_SLC_40['Payload Mass (kg)'].between(min,max)]
        fig2 = px.scatter(payload_range, 
                          x = 'Payload Mass (kg)', 
                          y = 'class', 
                          color = 'Booster Version Category', 
                          title = 'Correlation Between Payload and Successfull Launches for Site CCAFS SLC-40') 
        return fig2

# Run the app
if __name__ == '__main__':
    app.run_server()
